<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Data-Type-Casting on lyao&#39;s Blog</title>
        <link>http://localhost:1313/blog/en/tags/data-type-casting/</link>
        <description>Recent content in Data-Type-Casting on lyao&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>谷栗杳</copyright>
        <lastBuildDate>Sat, 23 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/blog/en/tags/data-type-casting/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Why would int 53191 become -12345 after truncating to short</title>
        <link>http://localhost:1313/blog/en/p/why-would-int-53191-become-12345-after-truncating-to-short/</link>
        <pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/blog/en/p/why-would-int-53191-become-12345-after-truncating-to-short/</guid>
        <description>&lt;h2 id=&#34;you&#34;&gt;&lt;strong&gt;You:&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;explain the truncation more detailed&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;&lt;strong&gt;ChatGPT:&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;Let’s dive deeper into what happens when an &lt;code&gt;int&lt;/code&gt; is &lt;strong&gt;truncated&lt;/strong&gt; to a &lt;code&gt;short&lt;/code&gt; in your program.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;key-background-concepts&#34;&gt;Key Background Concepts
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Size of Data Types&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;: Typically 4 bytes (32 bits) on most modern platforms.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short&lt;/code&gt;: Typically 2 bytes (16 bits).&lt;/li&gt;
&lt;li&gt;The exact sizes depend on the platform and compiler but follow the standard: &lt;code&gt;sizeof(short) ≤ sizeof(int)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Truncation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you cast a larger data type (&lt;code&gt;int&lt;/code&gt;, 32 bits) to a smaller data type (&lt;code&gt;short&lt;/code&gt;, 16 bits), &lt;strong&gt;only the least significant bits (LSBs)&lt;/strong&gt; that fit into the smaller type are retained.&lt;/li&gt;
&lt;li&gt;Any bits beyond the size of the smaller type (the most significant bits, MSBs) are discarded.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Signed Representation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;short&lt;/code&gt; is a signed type, meaning it uses the &lt;strong&gt;most significant bit (MSB)&lt;/strong&gt; as the &lt;strong&gt;sign bit&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;: Positive number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;: Negative number (two&amp;rsquo;s complement representation).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;detailed-step-by-step-analysis-of-truncation&#34;&gt;Detailed Step-by-Step Analysis of Truncation
&lt;/h3&gt;&lt;h4 id=&#34;step-1-initial-value-of-x&#34;&gt;Step 1: Initial Value of &lt;code&gt;x&lt;/code&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x = 53191&lt;/code&gt; (in decimal).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In hexadecimal, &lt;code&gt;53191&lt;/code&gt; is represented as:&lt;br&gt;
&lt;strong&gt;&lt;code&gt;0x0000CF47&lt;/code&gt;&lt;/strong&gt; (32 bits).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;0000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1111&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0111&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;(binary)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;step-2-casting-x-to-short-sx&#34;&gt;Step 2: Casting &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;short&lt;/code&gt; (&lt;code&gt;sx&lt;/code&gt;)
&lt;/h4&gt;&lt;p&gt;When &lt;code&gt;x&lt;/code&gt; is cast to a &lt;code&gt;short&lt;/code&gt;, &lt;strong&gt;only the least significant 16 bits&lt;/strong&gt; are kept:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;1100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1111&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0111&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;(binary)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;This corresponds to &lt;strong&gt;&lt;code&gt;0xCF47&lt;/code&gt;&lt;/strong&gt; in hexadecimal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, the value is interpreted as a 16-bit signed number:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The MSB (&lt;code&gt;1&lt;/code&gt;) indicates that the value is negative (two&amp;rsquo;s complement).&lt;/li&gt;
&lt;li&gt;To find the value of a negative number in two&amp;rsquo;s complement:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Invert the bits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;0011&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1011&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add 1 to the result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;0011&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1011&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1001&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;(binary) = 12345 (decimal)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The result is &lt;code&gt;-12345&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, &lt;code&gt;sx&lt;/code&gt; becomes &lt;code&gt;-12345&lt;/code&gt; after truncation.&lt;/p&gt;
&lt;h4 id=&#34;step-3-assigning-sx-to-y&#34;&gt;Step 3: Assigning &lt;code&gt;sx&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;When &lt;code&gt;sx&lt;/code&gt; is assigned to &lt;code&gt;y&lt;/code&gt; (an &lt;code&gt;int&lt;/code&gt;), no truncation occurs because &lt;code&gt;int&lt;/code&gt; can hold all the values of &lt;code&gt;short&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The value of &lt;code&gt;sx&lt;/code&gt; (&lt;code&gt;-12345&lt;/code&gt;) is preserved, so &lt;code&gt;y = -12345&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;summary-of-truncation&#34;&gt;Summary of Truncation
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Before Truncation&lt;/strong&gt;: &lt;code&gt;x = 53191&lt;/code&gt; (&lt;code&gt;0x0000CF47&lt;/code&gt; in 32 bits).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;After Truncation to &lt;code&gt;short&lt;/code&gt;&lt;/strong&gt;: Only the lower 16 bits are kept: &lt;code&gt;0xCF47&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interpretation as a Signed 16-bit Integer&lt;/strong&gt;: &lt;code&gt;0xCF47&lt;/code&gt; is &lt;code&gt;-12345&lt;/code&gt; in two&amp;rsquo;s complement.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value in &lt;code&gt;y&lt;/code&gt;&lt;/strong&gt;: The value &lt;code&gt;-12345&lt;/code&gt; is preserved when expanded back to 32-bit &lt;code&gt;int&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This truncation occurs because casting between different data types in C operates at the bit level without considering the original value&amp;rsquo;s &amp;ldquo;semantic&amp;rdquo; meaning.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
