<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>计算机组成原理 on 谷栗杳</title>
        <link>http://localhost:1313/blog/zh-cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</link>
        <description>Recent content in 计算机组成原理 on 谷栗杳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>谷栗杳</copyright>
        <lastBuildDate>Thu, 05 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/blog/zh-cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>内存存放数据的大端模式和小端模式</title>
        <link>http://localhost:1313/blog/zh-cn/p/%E5%86%85%E5%AD%98%E5%AD%98%E6%94%BE%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F/</link>
        <pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/blog/zh-cn/p/%E5%86%85%E5%AD%98%E5%AD%98%E6%94%BE%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F/</guid>
        <description>&lt;p&gt;在计算机中的数据存储，主要有两种模式：大端模式（big-endian）和小端模式（little-endian）。&lt;/p&gt;
&lt;p&gt;对于某个 16 进制的数据 &lt;code&gt;x = 0x01234567&lt;/code&gt;，首先要知道的是，&lt;code&gt;01&lt;/code&gt;（0x01） 在数据中是高位字节，而 &lt;code&gt;67&lt;/code&gt;（0x67） 则在数据中处于低位字节。&lt;/p&gt;
&lt;p&gt;假设 x 将被存储在 &lt;code&gt;0x100&lt;/code&gt; 起始的地址，由于 x 占用 4 个字节，存储的最高地址就是 &lt;code&gt;0x103&lt;/code&gt;，那么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大端模式，就是把高位字节数据（0x01）存储在低地址（0x100），而把低位字节数据（0x67）存储在高地址（0x103）。&lt;/li&gt;
&lt;li&gt;小端模式，就是把低位字节数据（0x67）存储在低地址（0x100），而把高位字节数据（0x01）存储在高地址（0x103）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终存储的情况如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/CSAPP/big-little-endian.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;由于数据的写法是从高位往低位变化，比如 10 进制的 123，是一百二十三，对于二进制也是如此，因此高位存储可能会更加符合人类的阅读习惯。&lt;/p&gt;
&lt;p&gt;然而对于计算机来说，它们是从低位往高位存储数据，因此直接把低位的数据存储在低地址，反而更方便按顺序读取。&lt;/p&gt;
&lt;p&gt;这也是为什么在现代电脑中小端模式反而更加普遍。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>整数到浮点数的转换</title>
        <link>http://localhost:1313/blog/zh-cn/p/%E6%95%B4%E6%95%B0%E5%88%B0%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
        <pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/blog/zh-cn/p/%E6%95%B4%E6%95%B0%E5%88%B0%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
        <description>&lt;p&gt;以 &lt;code&gt;3490593&lt;/code&gt; 这个整型数为例，如果将其转化为单精度浮点数，它在计算机中是以怎样的格式进行存储的？&lt;/p&gt;
&lt;p&gt;一个单精度浮点数在计算机中占用 4 个字节， 32 位。&lt;/p&gt;
&lt;p&gt;根据 IEEE 754 标准，一个浮点数 V 在计算机中是以如下格式存储的：
$$V=(-1)^{s}\times M\times2^{E}$$
其中，对于单精度浮点数来说（仅位数不同）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 为符号位，由最高位表示，占用 1 位。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M&lt;/code&gt; 为尾数，占用 23 位。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt; 为阶码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先我们将 &lt;code&gt;3490593&lt;/code&gt; 转换为二进制表示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;110101000110001000001
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一共有 21 位。&lt;/p&gt;
&lt;p&gt;由于其并不接近于 0，因此用规格化（Normorlized）表示法，具体表示为 &lt;code&gt;1.10101000110001000001 × 2^21&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;IEEE 754 标准中尾数 M 的值规定了一个隐藏的开头的 1，因此上述表示中的小数点之后的那些二进制数 &lt;code&gt;10101000110001000001&lt;/code&gt;（共 20 位），就是 M 的实际大小。不过由于 M 的位数规定 23 位，所以我们我们需要在其后补充 3 个 0 。因此最后的 M 的值为 &lt;code&gt;10101000110001000001000&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;由 2^21 可以得出，阶码 E 为 21 位，加上 127 的偏置之后就成了 148，其二进制表示为 &lt;code&gt;10010100&lt;/code&gt;。偏置是为了更好地表示负数。&lt;/p&gt;
&lt;p&gt;这样一来，&lt;code&gt;3490593&lt;/code&gt; 这个数最终在内存中的存储即为：
&lt;code&gt;0 10010100 10101000110001000001000&lt;/code&gt; （s E M，空格分隔不同的部分）。&lt;/p&gt;
&lt;p&gt;这个数 8 位一组用 16 进制表示为 &lt;code&gt;4A 56 45 04&lt;/code&gt;。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
