<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Foundation on lyao&#39;s Blog</title>
        <link>http://localhost:1313/blog/tags/foundation/</link>
        <description>Recent content in Foundation on lyao&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>谷栗杳</copyright>
        <lastBuildDate>Mon, 04 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/blog/tags/foundation/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>CSAPP reading notes - chapter 1</title>
        <link>http://localhost:1313/blog/p/csapp-reading-notes-chapter-1/</link>
        <pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/blog/p/csapp-reading-notes-chapter-1/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The hello program&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The ASCII text representation of hello.c&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;11-information-is-bits--context&#34;&gt;1.1 Information Is Bits + Context
&lt;/h2&gt;&lt;p&gt;All information in a system is represented as a bunch of bits.&lt;/p&gt;
&lt;h2 id=&#34;12-programs-are-translated-by-other-programs-into-different-forms&#34;&gt;1.2 Programs Are Translated by Other Programs into Different Forms
&lt;/h2&gt;&lt;p&gt;The gcc compiler driver reads the source file hello.c and translated into an execuable object file hello. The translation is performed in the sequence of four phases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preprocessing phase.&lt;/li&gt;
&lt;li&gt;Compliation phase.&lt;/li&gt;
&lt;li&gt;Assembly phase.&lt;/li&gt;
&lt;li&gt;Linking phase.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The programs that perform these phases (preprocessor, compilor, assembler, and linker) is known collectively as the &lt;em&gt;compliation system&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here is the phase figure:
&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The compliation system&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;13-it-pays-to-understand-how-compilation-systems-work&#34;&gt;1.3 It Pays to Understand How Compilation Systems Work
&lt;/h2&gt;&lt;p&gt;None.&lt;/p&gt;
&lt;h2 id=&#34;14-processors-read-and-interpret-instructions-stored-in-memory&#34;&gt;1.4 Processors Read and Interpret Instructions Stored in Memory
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Hardware orgnization of a typical system&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;PC: program counter
ALU: arithmetic/logic unit&lt;/p&gt;
&lt;h3 id=&#34;141-hardware-organization-of-a-system&#34;&gt;1.4.1 Hardware Organization of a System:
&lt;/h3&gt;&lt;h4 id=&#34;buses&#34;&gt;Buses
&lt;/h4&gt;&lt;h4 id=&#34;io-devices&#34;&gt;I/O Devices
&lt;/h4&gt;&lt;p&gt;I/O: Input/Output&lt;/p&gt;
&lt;h4 id=&#34;main-memory&#34;&gt;Main Memory
&lt;/h4&gt;&lt;p&gt;Physically, main memory consists of a collection of dynamic random access memory (DRAM).&lt;/p&gt;
&lt;h4 id=&#34;processor&#34;&gt;Processor
&lt;/h4&gt;&lt;h3 id=&#34;142-running-the-hello-program&#34;&gt;1.4.2 Running the hello Program
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Reading the hello program from the keyboard&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;DMA: direct memory access&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;loading executable from disk into main memory&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/1.7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Writing the output string from the memory to the display&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;15-caches-matter&#34;&gt;1.5 Caches Matter
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Cache memories&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The L1 and L2 caches are implemented with a hardware technology known as static random access memory (SRAM)&lt;/p&gt;
&lt;h2 id=&#34;16-storage-devices-form-a-hierarchy&#34;&gt;1.6 Storage Devices Form a Hierarchy
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;example of memory hierarchy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;17-the-operating-system-manages-the-hardware&#34;&gt;1.7 The Operating System Manages the Hardware
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.10.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Layered view of a computer system&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The operating system has two primary purposes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;to protect the hardware from misuse by runaway applications&lt;/li&gt;
&lt;li&gt;to provide applications with simple and uniform mechanisms for manipulating complicated and often wildly different low-level hardware devices.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It achieves both goal via the foundamental abstractions: processes, virtual memory, and files.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.11.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Abstractions provided by an operating system&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;171-processes&#34;&gt;1.7.1 Processes
&lt;/h4&gt;&lt;p&gt;When the operating system decides to transfer control from the current process to some new process, it performs a &lt;em&gt;context switch&lt;/em&gt; by saving the context of the current process, restoring the context of the new process, and then passing control to the new process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.12.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Process context switching&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;172-threads&#34;&gt;1.7.2 Threads
&lt;/h4&gt;&lt;p&gt;Each thread runs in the context of the process and sharing the same code and global data.&lt;/p&gt;
&lt;h4 id=&#34;173-virtual-memory&#34;&gt;1.7.3 Virtual Memory
&lt;/h4&gt;&lt;p&gt;Each process has the same uniform view of memory, which is known as its &lt;em&gt;virtual address space&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.13.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Process virtual address&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The virtual address space seen by each process consists of a number of well defined areas, starting from low to high:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Program code and data.&lt;/li&gt;
&lt;li&gt;Heap.&lt;/li&gt;
&lt;li&gt;Shared libraries.&lt;/li&gt;
&lt;li&gt;Stack.&lt;/li&gt;
&lt;li&gt;kernel virtual memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;174-files&#34;&gt;1.7.4 Files
&lt;/h4&gt;&lt;p&gt;A &lt;em&gt;file&lt;/em&gt; is a sequence of bytes. Every I/O devices is modeled as a file. All input and output in the system is performed by reading and writing files, using a small set of system calls known as &lt;em&gt;Unix I/O&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;18-systems-communicate-with-other-systems-using-networks&#34;&gt;1.8 Systems Communicate with Other Systems Using Networks
&lt;/h2&gt;&lt;p&gt;The network can be viewed as just another I/O devices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.14.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;A network is another I/O device&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The system copies a sequence of bytes from main memory to the network adapter rather than disk controller, which helps the data flow across the network to another mechine instead of a local disk drive.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/blog/img/1.15.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Using telnet to run hello program remotely over a network&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
